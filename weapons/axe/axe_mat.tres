[gd_resource type="ShaderMaterial" load_steps=9 format=3 uid="uid://deiwjwa2emqli"]

[ext_resource type="Texture2D" uid="uid://ccv4wnujh6dk" path="res://weapons/axe/axe_detail_mask.png" id="1_tcgnr"]
[ext_resource type="Texture2D" uid="uid://c3shivoy5d35f" path="res://weapons/axe/axe_metallic.png" id="2_xpx8f"]
[ext_resource type="Texture2D" uid="uid://bxx7weftifjpm" path="res://weapons/axe/axe_roughness.png" id="3_ux0wq"]

[sub_resource type="Shader" id="Shader_vna4n"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.1.1.stable.mono's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_nearest,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_nearest,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_nearest,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D texture_detail_albedo : source_color,filter_nearest,repeat_enable;
uniform sampler2D texture_detail_normal : hint_normal,filter_nearest,repeat_enable;
uniform sampler2D texture_detail_mask : hint_default_white,filter_nearest,repeat_enable;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

global uniform float viewmodel_fov;

#include \"res://shaders/includes/psx_inc.gdshaderinc\"

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;

	float onetanfov = 1.0f / tan(0.5f * (viewmodel_fov * PI / 180.0f));
	float aspect = VIEWPORT_SIZE.x / VIEWPORT_SIZE.y;
	// modify projection matrix
	PROJECTION_MATRIX[1][1] = -onetanfov;
	PROJECTION_MATRIX[0][0] = onetanfov / aspect;

	//POSITION = PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX.xyz, 1.0);
	POSITION = map_affine(snap_vertex(PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX, 1.0)));
	// draws the viewmodel over everything (disable if you want dof near on viewmodel)
	POSITION.z = mix(POSITION.z, 1.0, 0.99);
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	vec4 detail_tex = texture(texture_detail_albedo,base_uv);
	vec4 detail_norm_tex = texture(texture_detail_normal,base_uv);
	vec4 detail_mask_tex = texture(texture_detail_mask,base_uv);
	vec3 detail = mix(ALBEDO.rgb,detail_tex.rgb,detail_tex.a);
	vec3 detail_norm = mix(NORMAL_MAP,detail_norm_tex.rgb,detail_tex.a);
	NORMAL_MAP = mix(NORMAL_MAP,detail_norm,detail_mask_tex.r);
	ALBEDO.rgb = mix(ALBEDO.rgb,detail,detail_mask_tex.r);
}
"

[sub_resource type="Gradient" id="Gradient_v5jf5"]
interpolation_mode = 1
offsets = PackedFloat32Array(0, 0.2, 0.5, 0.7)
colors = PackedColorArray(0.278431, 0.172549, 0.0470588, 1, 0.341176, 0.207843, 0.0784314, 1, 0.447059, 0.298039, 0.14902, 1, 0.415686, 0.313726, 0.145098, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_q3vr3"]
frequency = 0.1

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_tpyvc"]
width = 64
height = 64
generate_mipmaps = false
seamless_blend_skirt = 1.0
color_ramp = SubResource("Gradient_v5jf5")
noise = SubResource("FastNoiseLite_q3vr3")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_eu08m"]
width = 64
height = 64
generate_mipmaps = false
seamless_blend_skirt = 1.0
as_normal_map = true
bump_strength = 4.0
noise = SubResource("FastNoiseLite_q3vr3")

[resource]
render_priority = 0
shader = SubResource("Shader_vna4n")
shader_parameter/albedo = Color(0.501961, 0.501961, 0.501961, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/texture_metallic = ExtResource("2_xpx8f")
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/texture_roughness = ExtResource("3_ux0wq")
shader_parameter/specular = 0.5
shader_parameter/metallic = 1.0
shader_parameter/texture_detail_albedo = SubResource("NoiseTexture2D_tpyvc")
shader_parameter/texture_detail_normal = SubResource("NoiseTexture2D_eu08m")
shader_parameter/texture_detail_mask = ExtResource("1_tcgnr")
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
