[gd_resource type="ShaderMaterial" load_steps=5 format=3 uid="uid://m45q7xvf7e3"]

[sub_resource type="Shader" id="Shader_0cr14"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.1.stable.mono's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_disabled,diffuse_burley,specular_schlick_ggx,unshaded;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear,repeat_enable;
uniform float distance_fade_min;
uniform float distance_fade_max;
uniform float alpha_scissor_threshold;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear,repeat_enable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;
uniform vec2 snowfall_speed;

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
}

void fragment() {
	vec2 base_uv = UV - TIME * snowfall_speed * vec2(0.25, 0.03125);
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	ALPHA *= albedo.a * albedo_tex.a;
	ALPHA_SCISSOR_THRESHOLD = alpha_scissor_threshold;
	{
		float fade_distance = length(VERTEX);
		const vec3 magic = vec3(0.06711056f, 0.00583715f, 52.9829189f);		float fade = clamp(smoothstep(distance_fade_min, distance_fade_max, fade_distance), 0.0, 1.0);
		if (fade < 0.001 || fade < fract(magic.z * fract(dot(FRAGCOORD.xy, magic.xy)))) {
			discard;
		}
	}

}
"

[sub_resource type="Gradient" id="Gradient_5e4yn"]
colors = PackedColorArray(1, 1, 1, 0, 1, 1, 1, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_0b7im"]
noise_type = 2
frequency = 0.125
fractal_type = 0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_imqsj"]
width = 64
invert = true
seamless = true
color_ramp = SubResource("Gradient_5e4yn")
noise = SubResource("FastNoiseLite_0b7im")

[resource]
render_priority = 0
shader = SubResource("Shader_0cr14")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/distance_fade_min = 2.0
shader_parameter/distance_fade_max = 4.0
shader_parameter/alpha_scissor_threshold = 0.9
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/snowfall_speed = Vector2(0.25, 2)
shader_parameter/texture_albedo = SubResource("NoiseTexture2D_imqsj")
